======================================================================================================
Easy

Better types for positions and directions

Light min radius (test with cartoon lighting and use for debug lights)

Reorder arguments in `call-with-*` functions and macros

Fix `send-multi-vertices`
 ? Remove altogether
 * Check for > 1M vertexes and split drawing (like `send-single-vertices` does)

pict3d% GUI
 * Point hovered over, plane normal at that point (after simple collision detection, or use to test)
 ? Resize corner
 * Toggle sunlight and underlight
 * Toggle debug view of lights
 * Toggle normals, outlines, etc.

Better default camera when no 'camera basis exists (point along min/max box diagonal)

game-pict3d-canvas%

? Use hash tables again instead of List-Hash instances for bases (test with "spheres-on-canvas.rkt")

? animated-pict3d-canvas%

======================================================================================================
Medium

3D Universe

Movement: find a way to move slowly or quickly (acceleration? speed control keys?)

Fix intermittent pict3d% editor lock problem

Speed up vector operations (settle for < 4 ulps error)

Use GL_MAP_UNSYNCHRONIZED_BIT and round-robin (should save 30% according to tests)

New shape constructors
 * cylinder (unit impostor with arbitrary affine transformation)
 ? quadratic patches to generalize cylinders, spheres, arches, etc.
 * heightmap/terrain (try a geometry shader)
 * smooth existing shape (snap extremely close vertices, interpolate normals)
 * skybox (render scene in six directions from camera, then construct a texture-mapped rect)

New kinds of Vertices
 * vao-vertices (need to key these on GL context)
 * indexed-single-vertices
 * indexed-multi-vertices
 * for indexed, try using glDrawElementsBaseVertex instead of manually incrementing offsets

Simple collision detection

Try state grouping on a test application using `equal?` instead of `eq?`

Constructive solid geometry (CSG) operations

? Physically-based transparency (i.e. proper transmission fractions)
? Special-case transformation matrix struct for translation

======================================================================================================
Hard

Figure out a nice functional API for textures

Screen-space ambient occlusion (paper "Scalable Ambient Obscurance")

Shadow mapping

pict3d%
 * Save/load pict3d% snips (waiting on Robby's redesign)
 * Make pict3d% snips display properly in algebraic stepper in student languages

Abstract the process of applying rendering passes

Find a good way to wire shaders with rendering passes

S-expression-based shader language that compiles to GLSL and can be run on the CPU for debugging
