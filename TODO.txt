======================================================================================================
Short-term (before RacketCon)

(: pict3d->bitmap (-> Pict3D Integer Integer (Instance Bitmap%)))

Movement: find a way to move slowly or quickly (acceleration? speed control keys?)

pict3d%
 * Save/load pict3d% snips (needs snip admin)
 * Make pict3d% snips save and load drawing parameters (e.g. near and far plane distances)
 * Fix editor lock problem

Fix "resizing sphere animation window creates garbage on borders"

? Put initial camera at "camera" in snips

======================================================================================================
Medium-term (if time before RacketCon)

Fix `send-multi-vertices`
 * Make it send a per-vertex model transformation
 * Check for > 1M vertexes and split drawing (like `send-single-vertices` does)

Fix specular highlight seam

Use GL_MAP_UNSYNCHRONIZED_BIT and round-robin (should save 30% according to tests)

New shape constructors
 * cylinder (unit impostor with arbitrary affine transformation)
 * heightmap/terrain
 * smooth existing shape (snap extremely close vertices, average normals)
 * skybox (render scene in six directions from camera/origin, then construct a texture-mapped rect)

New kinds of Vertices
 * vao-vertices (need to key these on GL context)
 * indexed-single-vertices
 * indexed-multi-vertices
 * for indexed, try using glDrawElementsBaseVertex instead of manually incrementing offsets

pict3d% GUI
 * Point hovered over, plane normal at that point
 ? Resize corner
 * Toggle sunlight and underlight
 * Toggle debug view of lights
 * Toggle normals, outlines, etc.

Simple collision detection

Light min radius (test with cartoon lighting)

Make rendering with inconsistent view matrix (e.g. scale negative x) not render shapes inside-out

Try state grouping on a test application using `equal?` instead of `eq?`

? Physically-based transparency (i.e. proper transmission fractions)
? Precompute ray-tracing per-pixel directions when projection matrix changes
? Package transform and inverse into a struct (may interfere with state grouping by `eq?`)
? Draw Pict3D with alpha (to let REPL background show through)
? Special-case transformation matrix struct for translation
? Pinch rectangle sides (implement with a projective transformation for rects only)

======================================================================================================
Long-term (possibly never :/)

Figure out a nice functional API for textures

Screen-space ambient occlusion (paper "Scalable Ambient Obscurance")

Shadow mapping

======================================================================================================

Deprecated stuff I use
 * glBegin/glEnd (in `gl-fullscreen-quad`)
 * gl_TexCoord
 * default vertex shader
 * gl_FragData
 * GL_QUADS (replace with triangles, and use a byte to indicate corner position)
