======================================================================================================
Easy

Clamp pict3d constructor arguments to reasonable values

Add a "How Do I" section

Add doc notes about performance characteristics

Add triangle mesh shape

OpenGL >= 3.2 render paths
 * Directional light
 * Point light
 * Triangle
 * Point light shell

Reorder arguments in `call-with-*` functions and macros

Fragment shader to draw grid at scale

Make dir+ and dir- take multiple arguments

Allow big-bang3d's frame-delay argument to be zero

======================================================================================================
Medium

Never produce +nan.0

Automate marshaling vertex data

Add networking to pict3d/universe

Use GL_MAP_UNSYNCHRONIZED_BIT and round-robin (should save 30% according to tests)

New shape constructors
 * triangle mesh
 * freeze + send vertices to reside on card
 * heightmap/terrain (try a geometry shader)
 * smooth existing shape (snap extremely close vertices, interpolate normals)
 * skybox (render scene in six directions from camera, then construct a texture-mapped rect)
 * wrap with texture/skybox
 * extrusion
 * CSG

? Physically-based transparency (i.e. proper transmission fractions)

? Special-case transformation matrix struct for translation and rotation

? Pause big-bang3d programs to get an interactive GUI

======================================================================================================
Hard

Figure out a nice functional API for textures

Screen-space ambient occlusion (paper "Scalable Ambient Obscurance")

Shadow mapping

pict3d%
 * Save/load pict3d% snips (waiting on Robby's redesign)
 * Make pict3d% snips display properly in algebraic stepper in student languages

Abstract the process of applying rendering passes

Find a good way to wire shaders with rendering passes

S-expression-based shader language that compiles to GLSL and can be run on the CPU for debugging
